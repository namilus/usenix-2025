#+title: Towards The Re-evaluation of Data Forging Attacks in Practice
#+author: Mohamed Suliman
#+options: toc:nil
* Introduction

The code presented herein can be used to reproduce our results. We
provide our code that:

1. Generates the execution trace of a model.
2. Recomputes the execution trace.
3. Performs data forging attacks across the trace.


* Installation
This repository makes use of docker and requires a NVIDIA GPU. Please ensure that:

1. NVIDIA CUDA (12.2/12.3) drivers are installed on your host machine.
2. Ensure that docker is installed.
3. Ensure that NVIDIA container toolkit is also installed. This can be
   done easily via your package manager (see this [[https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html][guide]] for details).



* Usage

To begin, we provide the script =run_docker.sh= which builds the
docker image and opens a bash shell to the user so that they may run
particular commands. We provide two use cases:

1. Generating the execution trace of LeNet/MNIST and then verifying
   that trace. This involves recomputing the checkpoints and
   highlighting the measured l2 distance under GPU nondeterminism.

2. Performing a data forging attack against a LeNet/MNIST trace.

* Tutorial: Generating and Verifying Execution Traces

Begin by opening the shell inside the docker container by running
=./run_docker.sh=. This will provide a shell that looks like the
following:

#+begin_example
root@52c4927ba747:/usenix2025# 
#+end_example

Now inside this shell run the script =lenet_mnist_verification.sh= with the following command:

#+begin_example
root@52c4927ba747:/usenix2025# . lenet_mnist_verification.sh
#+end_example


This will produce output like the following:

#+begin_example
. lenet_mnist_verification.sh
Generating trace for lenet/mnist...
...
lenet mnist $b = 100, E = 2, k = 1$,  1 runs
     l2: 4.45e-08 +- 0.00e+00, max = 4.454567559264433e-08
zero l2: 0.00 +- 0.00
root@52c4927ba747:/usenix2025#
#+end_example

This may take several minutes to complete. Once it has finished, type
=Ctrl-D= to exit the container and close the shell. Now you will find
a folder called =./experiments/= which will include the generated
execution trace, the verification l2 errors, and plots.


* Forging Traces

Begin by opening the shell inside the docker container by running
=./run_docker.sh=. This will provide a shell that looks like the
following:

#+begin_example
root@52c4927ba747:/usenix2025# 
#+end_example

Now inside this shell run the script =lenet_mnist_forging.sh= with the following command:

#+begin_example
root@52c4927ba747:/usenix2025# . lenet_mnist_forging.sh
#+end_example



This may take several minutes to complete. Once it has finished, type
=Ctrl-D= to exit the container and close the shell. Now you will find
a folder called =./experiments/= which will include the generated
execution trace, the approximation errors generated by the attack, as
well as the relevant plots.


* Trying Other Models and Datasets

The script =generate_trace.py= handles the generation of execution
traces. Its usage is given by the following:

#+begin_example
usage: generate_trace.py [-h] --every EVERY [--mods MODS [MODS ...]]
                         [--epochs EPOCHS] [--batch-size BATCH_SIZE]
                         [--eta ETA] [--seed SEED] [--name NAME]
                         [--deterministic]
                         {lenet,vgg,fcn1,t200} {mnist,cifar10,adult,imdb}

positional arguments:
  {lenet,vgg,fcn1,t200}
  {mnist,cifar10,adult,imdb}

options:
  -h, --help            show this help message and exit
  --every EVERY
  --mods MODS [MODS ...]
  --epochs EPOCHS
  --batch-size BATCH_SIZE
  --eta ETA
  --seed SEED
  --name NAME
  --deterministic
root@f01e457c888a:/usenix2025# 
#+end_example


For example, to generate a trace of a transformer trained on imdb reviews, run the following:

#+begin_src sh
python3 generate_trace.py t200 imdb --batch-size 100 --epochs 2 --every 1
#+end_src

This will produce a folder inside =./experiments/= which will contain
the trace. Similar usages may be found for =verify_trace.py= and
=forge_across_checkpoints.py=. 
